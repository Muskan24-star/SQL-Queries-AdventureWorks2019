-- Class Day 2 : 17-07-2025
-- class Assignment : to make a table 
create database Day1SQL;
use Day1SQL;
create table Employee(EId  int primary key, EFname varchar(50) not null, ELname varchar(50) not null,Salary decimal(10,2),Designation varchar(50) not null); 
insert into Employee values (1,"Rahul","Verma",10000.89,"Manager"),(2,"Sahil","Singh",8004.89,"HR"),(1,"Shreya","joshi",2000.89,"Assistant");
-- class Assignment (GitHub Questions)
use sakila;
select* from actor;

-- 1a. Display the first and last names of all actors from the table actor. 
select first_name, last_name from actor;

-- 1b. Display the first and last name of each actor in a single column in upper case letters. Name the column Actor Name. 
select upper(concat(first_name,' ',last_name)) as 'Actor Name' from actor;

-- 2a. You need to find the ID number, first name, and last name of an actor, of whom you know only the first name, "Joe."
-- What is one query would you use to obtain this information?
select actor_id, first_name, last_name from actor where first_name = 'Joe';

-- 2b. Find all actors whose last name contain the letters GEN:
select * from actor where last_name like '%GEN%';

-- 2c. Find all actors whose last names contain the letters LI. This time, order the rows by last name and first name, in that order:
select * from actor 
where last_name like '%LI%' 
order by last_name, first_name;

-- 2d. Using IN, display the country_id and country columns of the following countries: Afghanistan, Bangladesh, and China:
select country_id, country from country 
where country in ('Afghanistan', 'Bangladesh', 'China');

-- 3a. Add a middle_name column to the table actor. Position it between first_name and last_name. Hint: you will need to specify the data type.
alter table actor add column middle_name varchar(45) after first_name;

-- 3b.You realize that some of these actors have tremendously long last names. Change the data type of the middle_name column to blobs.
alter table actor modify middle_name blob;

-- 3c. Now delete the middle_name column.
alter table actor drop column middle_name;

-- 4a. List the last names of actors, as well as how many actors have that last name.
select last_name, count(*) as count from actor group by last_name;

-- 4b. List last names of actors and the number of actors who have that last name, but only for names that are shared by at least two actors
select last_name, count(*) as count from actor group by last_name having count(*) >= 2;

-- 4c. Oh, no! The actor HARPO WILLIAMS was accidentally entered in the actor table as GROUCHO WILLIAMS, the name of Harpo's second cousin's husband's yoga teacher.
-- Write a query to fix the record.
update actor set first_name = 'HARPO' where first_name = 'GROUCHO' and last_name = 'WILLIAMS';

-- 4d. Perhaps we were too hasty in changing GROUCHO to HARPO. It turns out that GROUCHO was the correct name after all! In a single query, if the first name of the actor is currently HARPO, change it to GROUCHO. 
-- Otherwise, change the first name to MUCHO GROUCHO, as that is exactly what the actor will be with the grievous error. 
-- BE CAREFUL NOT TO CHANGE THE FIRST NAME OF EVERY ACTOR TO MUCHO GROUCHO, HOWEVER! (Hint: update the record using a unique identifier.)

-- first find the unique id
select * from actor where last_name='WILLIAMS';

update actor
set first_name = 
    case 
        when first_name = 'HARPO' then 'GROUCHO'
        else 'MUCHO GROUCHO'
    end
where actor_id = 172;

select * from actor where last_name='WILLIAMS';


-- 5a. You cannot locate the schema of the address table. Which query would you use to re-create it? Hint: https://dev.mysql.com/doc/refman/5.7/en/show-create-table.html
show create table address;


-- 6a. Use JOIN to display the first and last names, as well as the address, of each staff member. Use the tables staff and address:
select s.first_name, s.last_name, a.address from staff s inner join address a on s.address_id = a.address_id;

-- 6b. Use JOIN to display the total amount rung up by each staff member in August of 2005. Use tables staff and payment.
select s.staff_id, s.first_name, s.last_name, sum(p.amount) as total_amount from staff s inner join payment p on s.staff_id = p.staff_id
where month(p.payment_date) = 8 and year(p.payment_date) = 2005
group by s.staff_id;

-- 6c. List each film and the number of actors who are listed for that film. Use tables film_actor and film. Use inner join.
select f.title, count(fa.actor_id) as actor_count from film f inner join film_actor fa on f.film_id = fa.film_id
group by f.film_id, f.title order by f.title;

-- 6d. How many copies of the film Hunchback Impossible exist in the inventory system?
select count(*) as total_copies from inventory
inner join film on inventory.film_id = film.film_id
where film.title = 'Hunchback Impossible';

-- 6e. Using the tables payment and customer and the JOIN command, list the total paid by each customer.
-- List the customers alphabetically by last name: Total amount paid
select c.first_name, c.last_name, sum(p.amount) as total_paid
from customer c
inner join payment p on c.customer_id = p.customer_id
group by c.customer_id
order by c.last_name;


-- 7a. The music of Queen and Kris Kristofferson have seen an unlikely resurgence.
-- As an unintended consequence, films starting with the letters K and Q have also soared in popularity.
-- Use subqueries to display the titles of movies starting with the letters K and Q whose language is English.
select title from film 
where (title like 'K%' or title like 'Q%')
and language_id = (select language_id from language where name = 'English');

-- 7b. Use subqueries to display all actors who appear in the film Alone Trip.
select a.first_name, a.last_name
from actor a
inner join film_actor fa on a.actor_id = fa.actor_id
where fa.film_id = (select film_id from film where title = 'Alone Trip');

-- 7c. You want to run an email marketing campaign in Canada, for which you will need the names and email addresses of all Canadian customers.
-- Use joins to retrieve this information.
select c.first_name, c.last_name, c.email
from customer c
left join address a on c.address_id = a.address_id
left join city ci on a.city_id = ci.city_id
left join country co on ci.country_id = co.country_id
where co.country = 'Canada';

-- 7d. Sales have been lagging among young families, and you wish to target all family movies for a promotion.
-- Identify all movies categorized as family films.
select f.title
from film f
left join film_category fc on f.film_id = fc.film_id
left join category c on fc.category_id = c.category_id
where c.name = 'Family';

-- 7e. Display the most frequently rented movies in descending order.
select f.title, count(r.rental_id) as rental_count
from film f
inner join inventory i on f.film_id = i.film_id
inner join rental r on i.inventory_id = r.inventory_id
group by f.title
order by rental_count desc;

-- 7f. Write a query to display how much business, in dollars, each store brought in.
select st.store_id, sum(p.amount) as total_revenue
from store st
left join staff s on st.store_id = s.store_id
left join payment p on s.staff_id = p.staff_id
group by st.store_id;
