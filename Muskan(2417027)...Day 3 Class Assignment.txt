
-- Class Assignment File
-- 1. List all product names and their list prices.
SELECT Name, ListPrice
FROM Production.Product;

-- 2. Find employees hired after 2010.
SELECT BusinessEntityID, JobTitle, HireDate
FROM HumanResources.Employee
WHERE YEAR(HireDate) > 2010;

-- 3. Retrieve all customers who live in 'Seattle'.
-- Tables: Sales.Customer, Person.Person, Person.Address, Person.BusinessEntityAddress
SELECT c.CustomerID, p.FirstName, p.LastName, a.City
FROM Sales.Customer AS c
inner JOIN Person.Person AS p ON c.PersonID = p.BusinessEntityID
inner JOIN Person.BusinessEntityAddress AS bea ON c.CustomerID = bea.BusinessEntityID
inner JOIN Person.Address AS a ON bea.AddressID = a.AddressID
WHERE a.City = 'Seattle';


-- 4:Show top 10 most expensive products.
SELECT TOP 10 Name, ListPrice
FROM Production.Product
ORDER BY ListPrice DESC;

-- 5.List all employees with their job title and department name.
-- Tables: HumanResources.Employee, HumanResources.EmployeeDepartmentHistory, HumanResources.Department

SELECT e.BusinessEntityID, e.JobTitle, d.Name AS DepartmentName
FROM HumanResources.Employee AS e
inner JOIN HumanResources.EmployeeDepartmentHistory AS edh 
    ON e.BusinessEntityID = edh.BusinessEntityID
inner JOIN HumanResources.Department AS d 
    ON edh.DepartmentID = d.DepartmentID
WHERE edh.EndDate IS NULL; -- current department


--Joins & Aggregations (6–10)
-- 6:Find total sales amount per year.
-- Tables: Sales.SalesOrderHeader
SELECT YEAR(OrderDate) AS SalesYear, SUM(TotalDue) AS TotalSales
FROM Sales.SalesOrderHeader
GROUP BY YEAR(OrderDate)
ORDER BY SalesYear;


-- 7:List product names and their categories.
-- Tables: Production.Product, Production.ProductSubcategory, Production.ProductCategory
SELECT p.Name AS ProductName, pc.Name AS CategoryName
FROM Production.Product AS p
LEFT JOIN Production.ProductSubcategory AS ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID
LEFT JOIN Production.ProductCategory AS pc ON ps.ProductCategoryID = pc.ProductCategoryID;


-- 8:Display the number of employees per department.
SELECT d.Name AS DepartmentName, COUNT(DISTINCT edh.BusinessEntityID) AS EmployeeCount
FROM HumanResources.EmployeeDepartmentHistory AS edh
inner JOIN HumanResources.Department AS d ON edh.DepartmentID = d.DepartmentID
WHERE edh.EndDate IS NULL
GROUP BY d.Name;


-- 9:Get total order quantity for each product.
-- Tables: Sales.SalesOrderDetail
SELECT p.Name, SUM(sod.OrderQty) AS TotalOrderQty
FROM Sales.SalesOrderDetail AS sod
INNER JOIN Production.Product AS p ON sod.ProductID = p.ProductID
GROUP BY p.Name
ORDER BY TotalOrderQty DESC;


-- 10:Find the average list price per product subcategory.
SELECT ps.Name AS SubcategoryName, AVG(p.ListPrice) AS AvgListPrice
FROM Production.Product AS p
INNER JOIN Production.ProductSubcategory AS ps ON p.ProductSubcategoryID = ps.ProductSubcategoryID
GROUP BY ps.Name
ORDER BY AvgListPrice DESC;



-- Subqueries & Nested SELECTs (11–15)
-- 11:List products that have a higher list price than the average list price.
SELECT Name, ListPrice
FROM Production.Product
WHERE ListPrice > (SELECT AVG(ListPrice) FROM Production.Product);


-- 12:Find employees who do not have a manager.
SELECT BusinessEntityID, JobTitle
FROM HumanResources.Employee
WHERE OrganizationLevel = 1; -- typically top level

-- 13:Get customers who have placed more than 5 orders.
SELECT CustomerID, COUNT(*) AS OrderCount
FROM Sales.SalesOrderHeader
GROUP BY CustomerID
HAVING COUNT(*) > 5;


-- 14:List all products that have never been sold.
SELECT p.ProductID, p.Name
FROM Production.Product AS p
LEFT JOIN Sales.SalesOrderDetail AS sod ON p.ProductID = sod.ProductID
WHERE sod.ProductID IS NULL;


-- 15:Find the second highest priced product in each subcategory.
WITH RankedProducts AS (
    SELECT 
        p.ProductSubcategoryID,
        p.Name,
        p.ListPrice,
        ROW_NUMBER() OVER (PARTITION BY p.ProductSubcategoryID ORDER BY p.ListPrice DESC) AS RankInSubcategory
    FROM Production.Product AS p
    WHERE p.ProductSubcategoryID IS NOT NULL
)
SELECT ProductSubcategoryID, Name, ListPrice
FROM RankedProducts
WHERE RankInSubcategory = 2;
